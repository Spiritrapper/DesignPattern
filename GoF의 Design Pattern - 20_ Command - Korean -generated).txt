[음악]

아

안녕하세요

고프 의 디자인 패턴 중 커맨드

패턴의 대한 강좌입니다

이미 아시겠지만 커맨드는 명령 이라는

의미입니다

커맨드 패턴 은 이 명령을 객체로

다루기 위한 패턴입니다

명령은 어떤 기능을 말합니다 즉

기능을 객체와 시킨다는 말인데요

이렇게 명령 즉 기능을 객체와 시키게

되면 sd 인자를 통해서 전달할 수도

있고 메모리에 보관도 할 수 있습니다

메모리 뿐만 아니라 ebm 2 스팀

같은 저장소에 도 저장할 수 있게

됩니다

즉 데이터가 아닌 행위를 저장할 수도

있다는 것입니다

또 명령을 전달하는 것도 메써드

인쇄로 전달한 것 뿐만 아니라

네트워크를 통해서 또 다른 컴퓨터에

전 달에서 기능을 수행할 수도

있습니다

말 뿐만 아니라 실제로 도 구현이

가능합니다

이처럼 기능을 자유롭게 잔다 라고

보관할 수 있게 되면 기능들을 보아서

한번에 실행하는 배치 실행이나 이미

실행된 기능을 되 돌리거나 다시

실행하는 언 둘이 2가 가능합니다

그리고 기능을 실행하기 전에 먼저

기능들을 모으고 보여진 기능 중 가장

우선순위가 높은 것을 먼저 실행하는

것과 같은 유연성을 발휘할 수도

있습니다

이 클래스 다이어그램은 커맨드 패턴의

대한 한 가지 예시 인데요

커맨드 라는 인터페이스가 있습니다

이 인터페이스를 구현하는 5개의

클래스가 보이는데요

각 클래스 는 자신만의 고유한 기능을

갖습니다

이 클래스 다이어그램은 콘솔 창에

원하는 위치에 원하는 문자열을 원하는

색상으로 출력하는 기능에 대한

것인데요

먼저 클리어 커맨드는 콘솔창에 출력된

내용을 모두 치우는 기능을 수행합니다

그리고 프린트 커맨드는 원하는

문자열을 출력 하고요

무브 커맨드는 출력 위치를 지정합니다

컬러 커맨드는 출력할 문자열의 색상을

지정합니다

각 명령에 대한 구체적인 클래스 는

오직 자신의 기능을 실행하는 것에만

초점을 맞추고 있습니다

실제로 커맨드 패턴을 적용해 개발을

하면 작은 기능 구현 의 집중해서

개발하게 되고 이 기능들을 조합해서

복합적이고 더 큰 기능을 자연스럽게

만들어 나가는 느낌을 받게 됩니다

커맨드 그룹 클래스 는

커맨드 객체를

여러개 담을 수 있는데요

이 커맨드 그룹은

여러 개의 기능을 한번에 실행할 수

있는 배치 기능 구현에 이용될 수

있습니다

코드를 작성해 보겠습니다

커맨드 인터페이스를 추가합니다

오직 명령을 실행하는 변 메써드 마늘

제공합니다

[음악]

만약 명령에 대한 언두 기능이

필요하다면 이 커맨드 인터페이스의

언두 메서드를 추가 해서

구현 클래스 에서 구현해 주면 됩니다

바로 이렇게요

[음악]

하지만 이 강좌에서는 언두 기능까지

는 구현 하지 않겠습니다

클리어 커맨드 클래스를 추가합니다

아

커맨드 인터페이스를 구현하도록 합니다

구현 해야 할 메서드를 추가합니다

[음악]

이 클래스 는 콘솔 화면을 지우는

명령을 생 한데요

콘솔 제어 문자를 이용해서 콘솔

화면을 줄 수 있습니다

이 문자열이 콘솔 화면을 제어해 주는

코드 값입니다

그리고 이 코드 값은 화면을 지우라는

명령 이구요

프린트 커맨드 클래스를 추가합니다

커맨드 인터페이스를 구현 하구요

출력할 내용에 대한 필드를 추가합니다

[음악]

생성자에서 필드의 값을 지정하도록

합니다

[음악]

9년 해야할 메서드를 추가합니다

이 클래스가 수행을 명령은 단지

출력하는 것이므로 코드는 다음과

같습니다

다음은 무브 커맨드 클래스입니다

커맨드 인터페이스를 구현합니다

으

기둥 r 콘솔의 위치에 대한 필드를

추가합니다

[음악]

잎이 세 값들을 생성자에서 진행할 수

있도록 합니다

구현 해야 할 메서드를 추가합니다

콘솔의 출력할 위치를 변경하는 콘솔

제어 분 짤을 사용해서 코드를

입력합니다

다음은 칼러 커맨드 입니다

아

커맨드 인터페이스를 구현 하더라구요

으

색상에 대한 컬러라는 이넘 타입 을

입력합니다

[음악]

총 8개에 색상 값을 가지는 데요

각 색상에 대한 콘솔 제 문제와 함께

항목을 추가합니다

2 문자열 들이

콘솔 체어 분자 입니다

2 제어 문자를 저장할 필드를

추가합니다

생성자에서 이 필드의 값을 지정하도록

합니다

[음악]

이 8개의 항목들은 모두

2컬러 생성자를 호출 한데요

이제 어분 짜 열 값이

생성자에 칼라 인자의 전달됩니다

코드 필드 값을 얻을 수 있는 sd

를 추가합니다

앞서 만들어둔 2칼라 잉 넘 객체를

필드로 추가합니다

생성자에서 칼라 필드의 값을 저장할

수 있도록 합니다

으

구현 해야 할 메서드를 추가합니다

[음악]

칼라 필드에

갯 코드 메서드로 얻은 색상에 대한

콘솔 제어 문자를 출력해서 색상을

변경하도록 합니다

지금까지 커맨드 인터페이스를 구현한

클래스를 보면요

클리어 커맨드

컬러 커맨드

우비 커맨드

프린트 커맨드가 있는데요

오직 자신이 수행해야 할 명령에

한해서 구현하고 있습니다

그리고 절대 다른 명령으로 부터

영향을 받지도 않고 주지도 않는 것을

알 수 있습니다

이제 마지막으로 커맨드 그룹

클래스입니다

커맨드 인터페이스를 구현합니다

으

여러 개의 커맨드 객체를 담을 수

있는 배열 필드를 추가합니다

[음악]

이 배열 필드에 커맨드 객체를

추가하는 메서드를 추가합니다

구현 해야 할 메서드를 추가합니다

이 필드의 저장하고 있는 커맨드 객체

들을 하나씩 실행하는 코드를

입력합니다

이 클래스 역시 자신이 수행하는

명령에 대한 코드가 전부입니다

즉 커맨드 그룹은 자신이 후에 어떤

종류의 명령이 있는지조차 부릅니다

이제 테스트를 위해서 메인 엔틱

클래스를 추가합니다

메인 함수를 추가 하구요

먼저 콘솔창에 내용을 지우는 명령을

수행해 봅니다

5

실행해 보겠습니다

[음악]

다음은 색을 노란색으로 지정하는

명령을 수행합니다

출력할 위치를 가로 시 새로 1로

지정합니다

[음악]

문자의 를 출력하는 명령을 수행합니다

[음악]

실행해 보겠습니다

다음은 출력할 위치를 가로 쉬고 새로

5로 이동 시킵니다

그리고 이미 만들어 뒀던

이 프린트 커맨드 를

다시 실행합니다

스윙 해보겠습니다

으

출력할 위치를 가로 25 세로 팔로

이동시킵니다

색상을 녹색으로 지정합니다

[음악]

출력 0 0 을 실행합니다

스승이 보면요

지금까지 작성한 코드를 보면 명령을

생성해서

바로 실행을 시키고 있는데요 이를

커맨드 그룹 클래스를 이용해서 배치

개념으로 한번에 실행시켜 보겠습니다

얘를 위해서 커맨드 그룹 객체를

만들겠습니다

그리고 커맨드 객체를

이렇게 바로 실행시키는 것 때쯤에

이 커맨드 그룹의

추가하겠습니다

[음악]

그리고 최종적으로 커맨드 그룹 객체에

대해서 실행을 시킵니다

시승에 보면요

[음악]

동일한 결과를 볼 수 있습니다

이상으로 커맨드 패턴의 대해서

살펴보았습니다

