[음악]

아

안녕하세요

고프 의 디자인 패턴 중 bda 터

패턴에 대해서 살펴보겠습니다

미디 더는 중재자 라는 뜻입니다

미 데이터 패턴에 대한 이해를 위해서

그림을 보고 이뇨

에어컨 보일러 창 분에 대한 객체가

있구요

만약 기운이 올라가서 너무 더울 경우

에어컨을 켜 게 됩니다

이때 에어컨이 창과 문을 닫을 라고

요청을 해야 되고 보일러가 켜져

있다면 그 라고 요청을 해야 합니다

또 창을 열게 되면 에어컨이 춰서

있는지 확인해서 에어컨을 끄라고

요청을 해야 합니다

분 도 마찬가지로

열리게 되면 에어컨 잊혀져 있는지

확인해서 에어컨을 끄라고 교 청을

해야 합니다

기온이 내려가면 출 경우에는 보일러를

켜야 하는 데요

이때는

분과 창을 닫고 에어컨이 작다고

있다면 에어컨을 중지시켜 합니다

또 춥지도 않고 답사할 경우 그리고

비가 오지도 않는 다면 창과 문을

모두 열어서 환기를 시키면 좋을

것인데요

물론 이 경우 에어컨이나 보일러가

켜져 있다면 거야 겠죠

이러한 여러가지 상황에 대한 처리를

위해서 각 객체들은 서로 관계를 1

쩝 하게 맺음으로써 다른 객체를

조작할 수 있어야 합니다

이 그림은 객체가 내기 뿐이므로

그럭저럭 우연히 가능할 것입니다

하지만 객체가 더 많이 추가되면 그

복잡도 는 훨씬 더 증가하게 됩니다

앞서 살펴본 객체간의 복잡한 관계를

단순화 시키기 위해서 이 그림처럼

중재자 를 누구요

각 객체들은

더 이상 다른 객체와 관계를 매치

않고 오직 중재자 와 관계를 맺게

됩니다

중재자 는 각 객체 들로부터 상태의

변경 통지를 받게 되구요

이렇게 받은 변경 내용을 토대로

이중재 자를 통해서 다른 개체들을

제어 해주게 됩니다

이처럼 복잡한 객체 간의 관계가

나타날 경우 중재자 를 부어

복잡한 관계를 단순화시킨 패턴이

bda 더 패턴입니다

미디 더 패턴에 대한 클래스

다이어그램의 한 가지 예 인데요

먼저 파티 서펀트 추상 클래스 는

앞서 설명 졌던 창 문 에어컨 보일러

객체와 같은 클래스 에 대한 부모

클래스 입니다

파티 서펀트 는 참여자 라는

의미인데요 바로 중재자 를 통한

중재에 참여 한다는 의미입니다

이 클래스 는 자신을 중재 해줄 2

2d 더 인터페이스를 참조 하고

있는데요

어떤 상태에 변화가 발생하면 참조하고

있는 입이 더 인터페이스가 객체의 게

상태의 병정이 발생했다고 알리게

됩니다

도어 윈도우 히트 보일러 쿨 에어컨

클래스 는

파티 서펀트 추상 클래스를 상속받고

있는데요 이 각각의 클래스 객체 들은

자신의 상태가 변경되게 되면 미디

에이터 개체에게 상태 변경 이

발생했다고 알리게 됩니다

그리고 스마트홈 클래스 는 2 bd

더 인터페이스를 구현하고 있는데요 이

스마트홈 운 여러 개의 파피스 펀트

객체를 가지고 있습니다

구체적으로는 바로 이 도어 윈도우

히트 보일러 쿨 에어컨 객체들 되구요

이 객체들은 서로 관계를 가지지 않고

오직 중재자 인 스마 처음 객체를

통해서만 관계를 맺습니다

이제 이 클래스 다이어그램을 근해

보면서 미디 더 패턴에 대해서 좀더

구체적으로 살펴보겠습니다 먼저 미디

더 인터페이스입니다

구현 해야 할 메서드 는 단 하나

인데요

이 중재자 에 참여하는 객체들은

자신의 상태가 변경되면 바로 이 파티

서펀트 체인지 그 메서드를 호출해

주어야 합니다

파티 서펀트 체인지 드 메소드의

인자로

팍스 펀트 백제를 봤는데요 이 인자

값이 바티 서펀트 체인지 드의

메서드를 호출해 준 기체입니다

암은 파피스 펀트 추상 클래스입니다

중재자 객체에 대한 필드를 하나 추가

하구요

생성자를 통해서 이 중재자 필드를

지정할 수 있도록 합니다

이참에 자 클래스인 파티 서펀트

클래스를 상속 받는 도어 클래스를

추가하겠습니다

먼저

분이 다쳤는지 에 대한 연구 값을

나타내는 필드를 하나 추가합니다

생성자를 추가 해 주고요

문을 여는 메서드를 추가합니다

이미 문이 열려 있다면 입에서 들을

바로 종류 하구요

그렇지 않다면 b 클러스트 필드를

펄스 로 변경합니다

상태가 변경 되었으므로 중재자 에

하트 서펀트 체인지 드 메서드를

호출합니다

다음은 문을 닫는 메서드 인데요

코드는 b 클로즈드 를 투르 로

지정하는 것만 다를 뿐 앞서 븐 오픈

데서도 와 동일합니다

그리고 현재 문이 닫혀 있는지 확인할

수 있는 메소드를 추가합니다

마지막으로 이 토어 개체를 분 짜

열로 변환 해주는 메소드를

재정이 합니다

암은 윈도우 캤습니다

도어 클래스 와 코드가 매우

유사하므로 설명한 생략하겠습니다

암은 히트 보일러 클래스입니다

이 역시 도어 클래스 와 유사하므로

설명을 생각합니다

하지만 여러분은 코드를

상세히 살펴 보시기 바랍니다

다음은 쿨 에어컨 클래스입니다

중요한 부분만 언급하면 요 상태가

변경되면

2 bd 더 객체의

팥의 서펀트 체인지 데 메서드를

호출해 주고 있다는 것이 핵심입니다

그 외에 이 코드는 도어 클래스 와

유사하므로 설명은 생략하겠습니다

이제

미디 더 인터페이스를 구현하는 스마트

홈 클래스를 추가합니다

이 클래스는 다음과 같은 참여자를

같습니다

각각 1개씩의 문과 창 에어컨 보일러

객체입니다

그리고 구현 해야 할 메서드를 추가

하구요

이 메서드를 호출한 참 회사가 도

어이구 도어가 열려 있다면

에어 컴과 보일러를 끕니다

그리고 입에서 들을 호출한 참여자가

윈도우 이고 윈도우가 열려 있다면요

역시 에어컨과 보일러를 끕니다

참여자가 에어컨이 고 에어컨이 작동

중이라면 요

보일러를 끄고 요

창과 문을 닫습니다

참여적 아 보일러 이고 보일러가 작동

중이라면 요

에어컨을 끄고 창과 문을 닫습니다

보시는 것처럼 참여자 객체 들간의

관계가 모두 이 하나의 메서드에

집중되어 있다는 것을 알 수 있습니다

이런 참여자들 간의 관계는 개발 시에

자주 변경될 수 있는 부분인데요

이렇게 자주 변경되는 것들을 한곳에

집중되어 있는 것이 유지보수 하기에

매우 좋구요 또 시스템이 단순하고

옮겨진다는 장점이 있습니다

다음은 이 스마트홈 클래스 의 개최에

대한 정보를 출력해주는 메서드를

추가합니다

이제 지금까지 만든 클래스들을 테스트

해보겠습니다

베인 엔트리 클래스를 추가 구요

메인 함수를 추가 미라

먼저 스마트홈 객체를 하나 생성하고

요

키보드를 통해서 숫자 값을 입력받을

수 있도록 스캐너 개체를 하나 생성이

됩니다

반복문을 추가 하구요

현재 홈 객 j 의 상태를 출력합니다

그리고 다음과 같이 1부터 8까지 의

명령문을

출력해 주고요

그리고 키보드로 숫자 값을 입력

받습니다

키보드로 입력받은 숫자 컷에 대한 홈

개체 1 참여자 객체들을

제어합니다

진행해 보겠습니다

먼저 문을 열어 보구요

창도 열어보겠습니다

에어컨을 작동시켜 보면요

자동으로 열렸던 꿈과 창이

다친 것을 볼 수 있습니다

다시 보일러 를 작동시켜 보면요

5

에어컨이 자동으로 꺼진 것을 수

있습니다

여기서 문을 열어 보면요

작동 중이던 보일러가 꺼진 것을 볼

수 있습니다

이상으로 객체들 간의 복잡한 관계를

중재자 를 부어서 매우 효과적으로

단순화 시킬 수 있는

미디 더 패턴에 대해서 살펴보았습니다

