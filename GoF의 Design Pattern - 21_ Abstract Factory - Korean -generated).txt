[음악]

아

안녕하세요

고 4s 쌓인 패턴 중 xx 팩토리

패턴 에 대한 강좌입니다

set 팩토리는 추상적인 것들을

만드는 공장 이라는 뜻인데요

일단 만들어야 할 컴포넌트들을

추상적으로 정의 누구요

그 다음에 구체적인 상황이 정해지면

앞서 정해 둔 추상적인 컴포넌트들을

해당 상황에 맞게 구체적으로 안드는

패턴입니다

예를 들면

버튼 체크박스 텍스트 에디트 라는

컴포넌트를 만들어야 합니다

하지만 이 컴포넌트 들은 운영체제에

따라서 만드는 방법이 달라지므로

운영체제가 정해지지 않은 상태에서는

이 컴포넌트들을 구체적으로 만들 수

없습니다

하지만

윈도우즈 운영체제 라는 상태가

정해지면 윈도우 지에 대한 맨 더링

api 등을 사용해서 컴포넌트들을 제

적으로 만들 수 있구요

리눅스 운영체제의 경우

뉴스에 대한 렌더링 api 를

사용해서 구체적인 컴퍼넌트를 만들 수

있습니다

이처럼 일단 만들어야 할 컴포넌트들을

추상적으로 정 의 하구요

그 다음에 구체적인 상황이 정해지면

추상적인 컴포넌트들을 구체적으로

생성해 내는 패턴이 xf 의 팩 털이

패턴입니다

이 클래스 다이어그램은 앞서 예로 든

그림을 나타낸 것인데요

여기서 컴포넌트 팩토리 클래스가

추상적인 컴포넌트들을 만들어내는

추상적인 공장이 구려

만들수 성적인 컴포넌트는 2 버튼

체크박스

텍스트 에디트 에 클래스입니다

추상적인 공장과 추상적인 컴포넌트에

대한 클래스 는 모두 추상 클래스 로

정의됩니다

그래서

이처럼 클래스 의 이름을 이탤릭체로

표기하고 있습니다

그리고 구체적인 공장 에 해당하는

클래스 는 윈도우즈 배터리와 이 눅스

팩토리 인데요 클래스 이름에서 이미

짐작할 수 있듯이

윈도우즈 운영체제에서 는 2 윈도우즈

팩토리 클래스가 사용되고

리눅스 운영 체제에서는 2 리눅스

배터리 클래스가 사용됩니다

이 두 클래스는 컴포넌트 팩토리 추상

클래스를 상속 받도록 해서 생성해야

할 컴퍼넌트 가 무엇인지 명확히 하고

있습니다

생성해야 할 구체적인 컴포넌트는 이

6개의 클래스들이 인데요

윈도우 c 버튼 클래스 는

버튼 추상 클래스를 상속받고

윈도우즈 팩토리에서 삼성 됩니다

그리고 윈도우즈 체크박스는

체크박스 추상 클래스를 상속 봤구요

윈도우즈 팩토리에서 상승됩니다

그리고 윈도우즈 텍스트 에디트는

텍스트 에디트 추천 클래스를 상속받고

윈도우즈 팩토리 클래스 에서

생성됩니다

리누스 버튼 개념 쓰 체크박스 리눅스

텍스트 에디트 클래스 역시 각각에

맞는 추상 클래스를 상속받아서

리눅스 팩토리에서 생성됩니다

이 클래스 다이어그램을 구해보도록

하겠습니다 먼저 생성해야 할 추상적인

컴포넌트를 작성하겠습니다

이 세 개의 클래스 인데요

먼저 버튼 클래스를 추가 구요

버튼에 표시될 타이틀에 대한 문자열

필드를 추가합니다

생성자에서 이 필드의 값을 지정할 수

있도록 합니다

그리고 버튼에 클릭 이벤트에 대한

메서드를 하나 추가했습니다

이 메서드는 윈도우 지나 리눅스 환경

과는 무관한 메서드로

이처럼 추상 클래스 에서 바로 구현될

수 있습니다

그리고 웬 더 추상 메서드를

추가합니다

화면상의 컴포넌트를 그리는 메서드

인데요

운영체제에 따라서 렌더링 api 가

달라지므로

일단 추상 클래스 로 정의되어

있습니다

다음은 체크박스 입니다

체크박스가 체크되어 있는지 에 대한

필드를 추가 구요

생성자에서 이 필드의 값을 지정할 수

있도록 합니다

또 이 필드를 설정할 수 있는

메서드를 추가합니다

체크박스 체크 값이 변경되면 다시

글에 져야 하므로 이 렌더 메서드를

호출해 주고 있습니다

그리고 렌더 메서드를 추상 메소드로

추가합니다

다음은 텍스트 에디터입니다

이 컴포넌트의 값을 필드로 추가

하구요

생성자에서 이 값을 지정할 수 있도록

합니다

또 이 필드의 값을 설정할 수 있는

메서드를 추가합니다

그리고 랜더 메서드를 추상 매서 도로

추가합니다

이제 추상 컴포넌트를 생성해주는 추상

패턴 클래스인 컴포넌트 팩토리 를

추가합니다

컴포넌트를 생성하는 3개의 추상

메서드를 추가합니다

이 클래스 는 오직 세 개의 추상

메서드는 말을 포함하고 있으므로

원한다면

일단 클래스가 아닌 인터페이스 로

정의해 됩니다

추상 메서드를 보면요

각각 버튼 체크박스 텍스트 lt 와

같은 추상 컴포넌트의 타입 개체로

발언하고 있습니다

그리고 이 예제의 경우 각 메서드의

인자를 보면요

각 추상 컴포넌트 클래스의 생성자에서

필요한 인자와 동일합니다

이제 구체적인 컴퍼넌트를 작성했습니다

먼저 윈도우즈 버튼입니다

버튼 클래스를 상속 받구요

생성자를 추가합니다

[음악]

그리고 구현 해야 할 추상 메서드를

추가합니다

구양 코트는 다음과 같습니다

으

이 코드가

윈도우즈 api 를 이용해서

컴포넌트를 렌더링하는 코드 라고

가정하겠습니다

다음은 뉴스 버튼입니다

버튼 클래스를 상속 바꾸 요

생성자를 추가합니다

그리고 9년 해야할 추상 메서드를

추가합니다

코드는 다음과 같습니다

으

다음은 윈도우즈 체크 밝습니다

체크박스를 상속 받구요

[음악]

생성자를 추가합니다

그리고 구현 해야 할 추상 메서드를

추가합니다

코드는 다음과 같습니다

다음은 리눅스 체크박스 입니다

체크박스를 상속 받도록 하구요

생성자를 추가합니다

그리고 구현 해야 할 추상 메소드를

추가합니다

코드는 다음과 같습니다

으

다음은 윈도우즈 텍스 트레이드 트

입니다

텍스트 엘리트 클래스를 상속 받구요

생성자를 추가합니다

그리고 구현 해야 할 추상 메서드를

추가합니다

코드는 다음과 같습니다

밤은 리눅스 텍스트 에디터입니다

텍스트 let 를 상속 받도록 하구요

으

생성자를 추가합니다

그리고 구현에 r 추상 메서드를

추가합니다

이 메소드의 구현 코드는 다음과

같습니다

[음악]

이제

윈도우즈 운영체제에 대한 구체적인

팩트를 클래스인

윈도우즈 팩토리 를 추가합니다

컴포넌트 팩토리 클래스를 상속 받도록

하구요

구현 해야 추상 메서드를 추가합니다

으

크리트 버튼은 윈도우 시에 대한 버튼

객체를 생성해서 반응합니다

[음악]

크리트 체크박스 역시 윈도우 지에

대한 컴포넌트로 바라구요

크리트 텍스트 에디터 역시도

마찬가지입니다

리눅스 운영체제에 대한 구체적인

팩토리 클래스인

리눅스 팩토리 클래스를 추가합니다

컴포넌트 팩토리 클래스를

어 3 섭도록 하고요

그리고 구현 해야 할 메서드를

추가합니다

크리트 버튼 메서드는

리눅스에 대한 버튼 컴퍼넌트를

생성해서 반환 합니다

나머지 매서 들도 이와 같은 방식으로

코드를 입력합니다

지금까지 작성한 클래스를 테스트

해보겠습니다

메인 엔트리 클래스를 추가합니다

메인 함수를 추가합니다

윈도우즈 환경일 경우 윈도우즈 팩토리

객체를 생성하면 되는데요

이후에는 이 팩토리 객체를 이용해서

원하는 컴퍼넌트를 어떤 운영체제인 지

고민할 필요없이 생산할 수 있습니다

버튼과 체크 박스 그리고 텍스트

let 컴퍼넌트를 생성합니다

컴포넌트를 생성하는 코드를 보면요

이 팩토리 객체 이외에는 특정한

운영체제의 정속 쪄 긴 코드를 볼 수

없습니다

그리고 렌더 메서드를 호출 봅니다

실행이 보면요

[음악]

윈도우즈의 맞게 각 컴포넌트 가

생성되어 실행되는 것을 알 수

있습니다

만약 리눅스 환경일 경우 모집

2 윈도우즈 팩트 대신에

리눅스 팩토리 로 변경 하기만 하면

됩니다

생성의 보면요

생성된 컴포넌트를 사용해보겠습니다 으

스윙이 보면요

컴포넌트를 사용하는 코드 어디에도

운영체제의 종속적인 코드가 없다는

것을 알 수 있습니다

지금까지 엑시트 팩토리 패턴에 대해서

살펴봤는데요

sdf 배터리 패턴은 어떤 특정한

상황에 대해서 그 상황에 맞는

컴포넌트들을 생성해 내는 패턴입니다

만약 새로운 상황이 생겼을 경우에

어떻게 설계를 확장 할 지

살펴보겠습니다

애플 100 os 환경 이 추가되었다

면

매고 베스 팩토리 클래스를 추가하고

맥 os 에 대한 구체적인 컴퍼넌트를

추가해주면 됩니다

이를 클래스 다이어그램의 표기

보겠습니다

맥 os 백돌이 처럼

구체적인 팩토리 를 추가할 때 버튼

체크박스 텍스트 엘리트처럼 어떤

컴퍼넌트를 만들어야 할 지 명확하게

정해져 있구요

각 팩토리는

자신이 만들 구체적인 컴포넌트가

무엇인지 명확히 정해져 있습니다

제르 맥 os 팩토리는 2

맥 os 버튼 맥 os 체크박스

그리고 105 x 텍스트

에디트를 생성해야 합니다

이러한 개발 방향은 별도의 개발자

문서 를 보지 않아도 소스 코드를

통해서 자연스럽고 명확히 파악할 수

있습니다

또한 sct 팩토리 패턴이 적용된

api 를 전달받아 사용하는 개발자

입장에서 빈뇨

모든 상황에 대한 구체적인 컴포넌트

쥬르 이 컴퍼넌트 드린 데요

이러한 구체적인 컴퍼넌트를 파악할 수

없이 오직 이 추상 컴퍼넌트 들만 을

이해하고 사용하면 됩니다

그리고 새로운 환경이 추가되어

구체적인 팩토리 클래스 와 컴포넌트

클래스 를 추구하는 경우를 보면 요

기존에 작성된 소스 코드는 전혀

변경할 필요가 없이 오직 새로운

팩토리 와 구체적인 컴퍼넌트 에 대한

클래스만 을 추가하면 됩니다

이상으로

flee 팩토리 패턴에 대해서

살펴보았습니다

