[음악]

아

안녕하세요

고프 의 디자인 패턴 중 뭐 멘토

패턴에 대해서 살펴보겠습니다

뭐 멘토는 추어 과거의 기업 이라는

뜻이구요 객체 상태 를 기억해

두었다가 필요한 시점에 기억해 둔

상태로 객체를 되돌리기 위한

패턴입니다

객체의 상태에 대한 기억은 다른 객체

에서도 접근할 수 있어야 하는데요

단 이때 개체에 대한 상태 기억은

읽기 전용으로 접근할 수 있도록 해야

합니다

즉 기억을 조작해 선 안되므로 변경할

수 없어야 합니다

그리고 객체의 상태에 대한 기억은

오직 해당 객체만 생산할 수 있도록

해야 합니다

즉 다른 곳에서 엉뚱한 기억을 생성할

수 없도록 해야 합니다

이처럼 기억에 대한 생성은 오직 그

기억에 대한 당사자만 하고 다른

누군가에게는 그 기억을 읽기 전용으로

공유할 수 있도록 해야 하는데요

프로그래밍 언어로 이러한 보호장치를

구현하는 방법은 7 습을 통해서

살펴보겠습니다

이 클래스 다이어그램은 뭐 멘토

패턴에 대한 한가지 예시입니다

워커 라는 클래스가 있구요

이 클래스는 시작 기점에서 목표

시점까지 걸어가는 기능을 제공합니다

그리고 이 모 멘토 클래스를 이용해서

즉 과거의 기억을 통해서 시작

지점에서 목표지점까지 점점 가까이

도달할 수 있습니다

시작 시점에서 목표지점까지 점점

가까이 토달 수 있도록 워커에 어떤

기억을 남게 하는지 그리고 기억에

대한 멈 엔터를 어떻게 사용해야

하는지 코드를 통해서 살펴보겠습니다

먼저 워커 클래스입니다

워커 클래스의 필드를 추가합니다

이 커런트 x 와 커런트 와인은

워커에 현재 위치에 대한 좌표 이구요

2

타겟 x 와 타 개도 와인은 워커가

도달해야 할 목표 잡힙니다

그리고

2 액션 리스트는 시작 자 표에서

목표 자 표로 가기 위해서 어떤

액션을 취해야 하는지 순서대로

저장하기 위한 배열 기체입니다

참고로 워커가 할 수 있는 액션 에는

비 아래 왼쪽 오른쪽으로 이동하는

것입니다

다음으로 생성자를 추가해서 시작 자

표와 목표 좌표 값을 지정할 수

있도록 합니다

다음은 워커 베스트 인데요

110원 인재를 받아서 이동하는

메서드입니다

sd 에 코드를 입력하면 요 먼저

인자로 받은 액션 값을 액션 리스트에

추가합니다

액션 값이 업 이면 현재 y 좌표를

1만큼 증가 시켜서 위로 이동시킵니다

그리고 라이트 이면 현재 x 사표를

1만큼 증가 시켜서 오른쪽으로

이동시킵니다

액션이 다운 이면 현재 y 좌표를

일만큼 감소시켜서 아래도 이동시킵니다

그리고 레프티 면 현재 x 사표를

일만큼 감소시켜서 왼쪽으로 이동

시킵니다

그리고 현재 자 표에서 목표 차표

까지 의 거리를 반환 합니다

다음은 뭐 멘토 필수인데요

뭐 멘토는 클래스 다이어그램은 서피스

된것처럼 내부 클래스 입니다

즉 워커에 이너 클래스 인데요

이우는 이몸 엔터 객체는 오직 워커

클래스 에서만 생성할 수 있도록 하고

또 오직 워커 클래스 많이 모멘텀에

필드를 변경 할 수 있도록 하기

위함입니다

다음처럼 입력합니다

보시면 모든 필드와 생성자가 프라

입에 접근 죄 로 지정되어 있습니다

그리고 워 클래스 에서 기억으로

남겨야 하는 현재 x y 좌표 와

액션 리스트 필드가 있습니다

다음은 뭐 멘토 객체를 생성하는 매서

됩니다

먼저 뭐 멘토 객체를 하나 생성

하구요

뭐 멘토의 모든 필드 값을

워커의 필드 값으로 지정 합니다

보시면 액션 리스트는

클론 메서드를 사용해서 깊은 복사 로

지정을 하고 있습니다

만약 클론 으로 하지 않으면 워커

객체의 액션 리스트에 내용이 변경 돼

버리면 뭐 멘토의 섹시한 리 스 도

동일하게 변경되기 때문입니다

마지막으로 멈 엔터를 발언 하구요

다음은 모멘텀 객체를 이용해서 워커의

상태를 변경 하는 메서드입니다

입에서 드가

객체의 상태를 기억해 두었다가 필요할

때 기억해 둔 상태로 객체를

되돌려주는 메서드 에 해당합니다

코드는 다음과 같구요

보시면

액션 리스트는 클론 메서드를 통해서

깊은 복사 로 지정하고 있습니다

그리고 이 워커 객체를 진짜 열로

변환 해주는 애써 들을 재정이 합니다

클래스 다이어그램을 벌써 다

구했는데요 이제 구현한 클래스를

테스트 해보겠습니다

메인 엔트리 클래스를 추가합니다

메인 함수를 추가합니다

먼저 워커 객체를 하나 생성 하구요

현재 자 표는 00 이구요

또 목적지 자 표는 10 10 입니다

워커 객체를 이름 시키는 행위

해당하는 문자열을 배열로 정의합니다

그리고 워커의 행위를 무작위로 지정할

수 있도록 랜덤 객체를 하나 정의해

2 구요

워커의 현재 좌표에서 목적이자 표까지

의 최소 길이를 계속 확인해야

하는데요

이를 위해 일단 최대 값으로 지정된

민 비슷한 스 변수를 정해줍니다

그리고 앞으로 생성할 워커의 뭐 멘토

객체를 널 값으로 지정해서 정의의

되구요

이제 워커를 움직일 하겠습니다

반복문을 입력하고 요

그리고 다음 코드를 입력합니다

0부터 3까지 의 난수 값을

발생시켜서

액션 쓰 배열을 통해서 워커가

취해야할 액션 값을 결정하는

코디입니다

2 액션 값을 워커에 워크 메스 d

인재 로 지정해서 워커를 이동시키고

요

워크 메서드 는 이동된 후에 현재

위치에서 목표 위치 까지의 거리 값이

반환됩니다

실행된 액션과 목표 자 표까지 의

거리를 화면에 출력해 주고요

만약

어 리 가 0 이라면 목표 지점에

도착한 것이므로

반복문을 종료합니다

마냐 현재 거리가

이현재 거리가 최소 거리보다

더 작다면 즉 점점 옥 표에 가까워

지고 있다면

현재 거리를 최소 거리 로 지정

하구요

이 상태를 기억해 둡니다

그렇지 않다면

으

이전에 기억해 둔 상태로 워커의

상태를 되돌립니다

이방 봉 문이 완료되면

워커 를 출력해 봅니다

수랭 결과를 보면 요

점점 목표 위치까지 가까워지다 가

목표 위치에 도달하는 것을 알 수

있습니다

그리고 이렇게 도달할 까지

어떠한 액션을 취해 있는지 또 확인할

수 있습니다

워커와 몸엔 더 클래스 를 사용하는

코드를 다시 보면요

오멘 더 객체는 반드시

워커 를 통해서만 생성할 수 있다는

것인데요

이런 생성 방법 이외에는 뭐 멘토

객체를 생성할 수 없게 되어 있습니다

이상으로 객체의 상태를 기억해

두었다가 필요한 시점에 기억해 둔

상태로 객체를 되돌리기 위한 뭐 멘토

패턴에 대해서 살펴보았습니다

