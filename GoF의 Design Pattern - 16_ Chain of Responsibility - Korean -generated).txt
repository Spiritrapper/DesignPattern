[음악]

아

안녕하세요

고프 의 디자인 패턴 중 3이 너

브레스 81 2d 패턴에 대해서

살펴보겠습니다

번역하면 책임의 연결 인데요 여기서

책임이란 무언가를 처리하는 기능을

의미합니다

이 기능이 대한 구현은 클래스 단위로

이루어집니다

책임을 연결한다는 의미는 여러 개의

책임을 동적 으로 즉 실행중에

연결한다는 의미 이구요

이렇게 연결된 기능들을 순서대로

실행하는 패턴이 체인 업을 s 판

11 2 티베탄 입니다

긴 음을 책임 이라는 개념으로 분리

즉 기능을 클래스별로 분리해서

구현함으로써 기능에 대한 클래스 의

독립성이 보장되고 요 이로 인해

최적화된 코드를 작성할 수 있게

됩니다

체인 노블레스 판 11 d 패턴 의

활용 예 인데요

첫번째는 url 문자열을 던져주면

책임 별로 url 을 구성하는

요소들의 처리 입니다 즉 이 책이

밀은 유아 렐의 프로토콜을 처리

하구요 책임이 는 도메인을 처리하며

책임 삼은 포트를 처리합니다

이처럼 책임 일에서부터 책임 3까지

체인 처럼 연결되어 순서대로 책임이

수행됩니다

두번째는 신용카드 정보를 던져주면 이

책임 일부터 시작해서 3 심사까지

신용카드가 어디 회사 것인지를

파악해서 배치되는 회사 카드에 대한

처리 인데요

예를 들어서 삼성카드 를 입력해주면

먼저 책임 이래서 이 카드가 국민카드

인질 검사하고 아니므로 다음에

신한카드 인질 검사합니다

역시 아니므로 다음에 삼성카드 인질

검사합니다 삼성카드 이므로 그에 맞게

처리 라고

다음번 책임 사는 더 이상 실행할

필요가 없습니다

체인 업을 s 81 패턴의 클래스

다이어그램에 대한 예시 인데요

url 분자 열을 처리해주는 경입니다

책임 들 사이의 연결이 필요 하므로

이선희 나타낸 것처럼

핸들러는 자신과 동일한 클래스 객체를

필드로 가집니다

핸들러 라는 추상 클래스 는 책임에

대한 부모 클래스 이고 이 클래스를

상속받아 구체적인 기능에 대한 책임을

구현하게 됩니다

핸들러 라는 이름으로 처한 이유는요

무언가를 처리한다는 의미를 나타내기

때문 인데요 이 프로토콜 핸들러는

이거를 해서 프로토콜 마늘 처리하고

이 도메인 핸들러는

6월에 대해서 도메인 마늘 처리하며

2포트 핸들러는 유아라 해서 포트만

을 처리합니다

이 클래스 다이어그램을 구해

보겠습니다 먼저 핸들러 추상

패스입니다

먼저 다음 책임에 대한 핸들러 필드를

추가합니다

그리고 다음 책임을 지정할 수 있는

메서드를 추가합니다

[음악]

프로세스의 추상 메서드를 추가합니다

[음악]

구체적인 책임에 대한 기능의 구현

코드는 이 프로세스의 추산 메서드에서

작성하게 되는데요

입에서 되는 자식 클래스 에서

구현됩니다

프로텍티브 접근자 를 가지게 함으로써

이 클래스 와 자식 에서만 입에서

들을 접근할 수 있도록 합니다

그리고 이런 메소드를 추가합니다

입에서 드는 연결된 책임 들을

순차적으로 실행해 줍니다

이 클래스는 추상 프레스 이므로

에스텍 특히 워드 를 지정합니다

이제 구체적인 책임 클래스를

추가합니다

먼저 프로토콜 핸들러 클래스 입니다

핸들러를

상속 받도록 하구요

구연 해야할 추상 메서드를 추가합니다

그리고 이 거래에 대해서 프로토콜

마늘 처리하도록 코드를 작성합니다

처리 내용은 프로토콜이 무엇인지를

찾아서

출력하는 것입니다

다음은 도메인 핸들러 클래스 입니다

핸들러 클래스를 상속 받구요

구연 해야할 추상 메서드를 추가합니다

코드를 작성하면 요

6월 해서

도메인에 해당하는 문자열을 살아서

출력해 주는 코드입니다

다음은 포트 핸들로 입니다

핸들러 클래스를 상속 받구요

구연 해야 에 추상 메서드를

추가합니다

코드를 작성하면 요

6월에서

포트 버너를 찾아서 출력해 줍니다

이제 지금까지 작성한 클래스들을

테스트 해보겠습니다

메인 엔트리 클래스를 추가합니다

메인 함수를 추가합니다

먼저 프로토콜과 포트 도메인을

처리하는 핸들러 객체를 정의하고 요

체인 처럼 연결합니다

그리고 처리할 u 아래를 정 하구요

[음악]

핸들로 중 시작 핸들러에 이런

메서드를 호출해서 유아 레를

처리합니다

실행 결과의 보면요

[음악]

다음처럼 url 에서 각 부분이

처리되어 출력되는 것을 볼 수

있습니다

만약 여기서

url 중에 패스 를 처리해 주는

기능을 추가해야 한다면 클래스

다이어그램에서

페 스 핸들러 라는 클래스 1 추가

하구요

그리고 이 패스 핸들러가

이 핸들러 클래스를 상속 받도록

합니다

그리고 이 패스 핸들러에 대한 코드를

입력하면 되구요

이런 방식으로 새로운 기능을 추가하게

되면 기존의 다른 클래스 의 코드는

전혀 변경하지 않고 새로운 코드 작성

만으로 기능을 추가할수 있게 됩니다

이는 최적화된 설계 구조에서 나타나는

매우 좋은 모습입니다

이상으로

기능을 책임 이라는 개념으로 분리하고

이 책임 들을 체인 처럼 연결해서

실행하는 체인 업을 s 판 11 2d

패턴에 대해서 살펴보았습니다

