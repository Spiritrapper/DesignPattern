[음악]

아

안녕하세요

고프 의 디자인 패턴 중 브리지

패턴에 대해서 살펴보겠습니다

브리지 패턴은 기능 계층과 훈련

계층의 분리 를 통해서 시스템의

확장성과 유지보수 성을 높이는 패턴

인데요

기존 시스템에 새로운 기능을 추가

해도

기능 계층을 통해 기존에 작성된

코드의 변경을 최소화시킬 수 있구요

또한 기존의 기능에 대해서도

구현 계층을 통해서 확장을 용이하게

해줍니다

다시 그림을 통해 설명하면 요 기능

계층과 구형 캐치미 라는 두 개의

영역이 존재하는데요 지능 대칭의

포함되는 것은 새로운 기능을 위한

메서드를 추가할 수 있는 클래스들

입니다

그리고 구연 계층의 포함되는 것은

이미 정해진 인터페이스 에 대한 구현

클래스 뷰 입니다

또한 이 기능 계층과 구현 계층을

연결하기 위해서 브리지 즉 다리를 로

와 연결한다 를 의미 해서 브리지

패턴이라고 합니다

리지 패턴에 대한 한 가지 예로

표현한 클래스 다이어그램은 다음과

같습니다

드래프트 와 퍼블릭 케이션 클래스가

기능 계층의 포함된 것들이고 요

그리고 디스플레이 인터페이스와 심플리

디스플레이 캡션 디스플레이가

구현 계층의 포함되는 것들입니다

그리고 드래프트가 디스플레이가 서로

연결되어 있는 모습인데요

마치 부리지 즉 다리가 놓여져 있는

모습입니다

이 클래스 다이어그램을 실제 구현에

보면서 이 다이어그램의 구성 요소들에

대해서 자세히 설명 드리겠습니다

먼저 드래프트 클래스입니다

이 클래스 는 어떤 원고에 대한 제목

저자 내용 에 대한 데이터를 담고

있는 클래스입니다

그리고 이러한 데이터를 화면에

표시해주는 데요 표시 주는 방식에

대한 구현은 이 디스플레이

인터페이스의 막히게 됩니다

레프트 클래스를 추가 하구요

제목 저작 내용에 대한 값을 저장할

수 있는 필드를 추가합니다

그리고 각 필드를 얻을 수 있는 겟

접근자 메서드를 추가합니다

생성자를 통해서 각 필드의 값을

지정할 수 있도록 합니다

그리고 각 필드를 제목 저작 내용의

순서대로 출력할 수 있는 메서드를

추가합니다

보시면 출력하는 구체적인 구현은 이

디스플레이 인터페이스를 사용합니다

이제 디스플레이 인터페이스 를

추가합니다

세 개의 메소드가 있는데요

각각 드래프트 객체를 받아서 제모

저자 내용을 출력하는 메소드 입니다

이 매스 드 글에 대한 실제 구현

코드는

인터페이스의 구현 클래스 에서

작성됩니다

디스플레이 인터페이스 를 구해 나는

심플 디스플레이 클래스를 추가합니다

s 플레이 인터페이스를 구해야 한다고

명시하고 요

구현 해야 할 디스플레이 인터페이스의

메서드를 추가합니다

타이틀 메서드의 는 드래프트에 제목을

그대로 출력하고 요

어썸 sdn 은 드래프트에 저자를

그대로 추적합니다

컨텐츠 메서드 에는 트 래 프 트 의

내용을 한 줄씩 얻어와 그대로

추적합니다

암은 캡션 디스플레이 클래스를

추가합니다

디스플레이 인터페이스를 구해야 한다고

명시하고 요

디스플레이 인터페이스의 세 개의

메서드를 추가합니다

타이틀 메서드의 는 재 무기 라는

단어와 함께

드래프트 의 제목을 출력하고 요

었어 메서드의 는 저자 라는 단어와

함께 드래프트 의 저자 를 출력합니다

그리고 컨텐츠 메서드의 는 내용

이라는 단어와 함께

내용을 1 주식 얻어와 들여쓰기 와

함께 출력합니다

지금까지 작성한 코드를 테스트 하기

위해서 메인 엔트리 클래스를

추가합니다

메인 메서드를 추가 하구요

드래프트 클래스 의 객체를 생성하기

위한 데이터를 정의합니다

드래프트 객체를 생성하고 요

먼저

심플 디스플레이 클래스를 이용해서

드래프트 객체를 출력해 보겠습니다

실행해보면 요

다음은 캡션 디스플레이 클래스를

통해서 드래프트 백제를 출력해

보겠습니다

보시는 것처럼

구현 계층의 포함된

디스플레이와 심플러스 플레이 캡션

디스플레이 를 통해서

드래프트를 다양한 형식으로 출력할 수

있는 것을 확인할 수 있습니다

이제 새로운 요구 사항이 생겨서

그에 대한 새로운 기능을 추가해야 할

상황에 있다고 가정하겠습니다

그 요구 사항은 이 드래프트가

출판 될 경우 출판사와 가격 정보를

출력해 줘야 한다는 것입니다

단 기존의 드래프트 의 기능은 그대로

유지 하고요

이 요구사항을 위해서 이 법을 익혀

이션 클래스가 추가됩니다

클래스를 추가 하구요

드래프트 클래스를 상속 받도록 합니다

출판사와 가격에 대한 필드를 추가

하구요

생성자를 통해서 출판사와 가격에 대한

값을 주장할 수 있도록 합니다

그리고 출판사와 가격을 출력해 주는

새로운 기능을 추가합니다

그리고 부모 클래스 의 프린트에

3rd 를 다음처럼 재 정의합니다

이 클래스를 테스트 해보겠습니다

메인 엔트리 클래스 에서 출판사와

가격에 대한 값을 정의하고

퍼블릭 케이션 객체를 생성합니다

그리고 이 객체를 통해 플레이 원

객체를 이용해서

출력합니다

실행을 해보면 요

이번에는 디스플레이 투 객체를

이용해서 추억해 봅니다

보시는 것처럼 새로운 기능에 대해서

기존의 클래스 에 대한 어떠한 변경도

없이 추가할 수 있는 것을 알 수

있습니다

지금까지 작성한 코드는

브리지 패턴을 설명하기 위한 관점에서

작성한 예시 얻습니다

작성한 코드는 이 구현 계층을 통해서

하나의 데이터를 다양한 형태로

표현했고

2 기능계 층을 통해서 새로운 요

사항이 발생했을 때 기존에 작성된

코드를 변경하지 않고도 새로운 기능을

추가할 수 있었습니다

기능계 층과 구현 계층의 분리를 통해

기능의 확장 과 유지보수 성을 높일

수 있는 브리지 패턴에 대해서

살펴보았습니다

