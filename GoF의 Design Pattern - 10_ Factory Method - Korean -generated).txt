[음악]

아

안녕하세요

고프 의 디자인 패턴 중 팩토리

메서드 패턴에 대해서 살펴보겠습니다

팩토리 메소드 패턴 은 객체 생성을

위한 디자인 패턴입니다

객체 생성에 필요한 과정을 미리

정해놓고 각 과정에 대한 다양한

구현이 가능한 되요

이런 점을 통해서 객체 생성에 필요한

전철이나 9 처리를 우연하게 처리할

수 있습니다

그리고 원하는 시점에서 생성하고자

하는 클래스를 구체적으로 정에 생성할

수 있는 유연성을 제공합니다

팩토리 메소드 패턴 은 객체 생성에

대한 인터페이스와 구현을 분리

시킴으로써 시스템의 확장성과 유치

보성을 높여 주는 데요

이러한 팩토리 메소드 패턴의 대한

이야기는 클래스 다이어그램과 실습을

통해서 좀 더 자세히 설명

드리겠습니다

팩토리 메서드 패턴이 적용된 클래스

다이어그램 계십니다

팩토리 클래스 와 아이템 인터페이스가

있구요

팩토리 클래스 는 아이템 을

생성해주는 절차를 정해 주는 역활을

합니다

팩토리는 추상 클래스 로써 아이템 을

생성해주는 각 절차에 대한 구체적인

구현은 정해져 있지 않구요

그리고 아이템 인터페이스 는 앞으로

생성될 다양한 종류의 아이템을 동일한

타입으로 처리할 수 있도록 해줍니다

그리고 이 아이템 팩토리 는 팩토리

클래스의 추상 메서드를 구현하는

클래스 인데요 아이템 객체를 생성하기

위한 각 절차를 구체적으로 구현하는

코드가 작성되는 클래스입니다

그리고 스워드 쉴드 보험 된 아이템

인터페이스에 대한 구현 클래스 입니다

이 클래스 다이어그램에 대한 시스템의

기능을 설명 드리면 필요한 시점에

칼이나 방패 활 을 생성해 주는 데요

각 아이템은 생성할 수 있는 개수의

제약이 있습니다

아이템 을 생성할 때 생성할 수 있는

개수를 초과하게 되면 더 이상

아이템을 생산할 수 없도록 합니다

이제 이 클래스 다이어그램을 구현해

보도록 하겠습니다 먼저 아이템

인터페이스입니다

실습을 최대한 단순화 시키기 위해서

유지라는 메서드 만 추가합니다

그리고 아이템 인터페이스를 구현한

스워드 클래스입니다

다음은 쉴드 클래스입니다

다음은 보우 클래스입니다

암은 팩토리 추상 클래스입니다

먼저 아이템 객체를 생성하기 위한

절차를 정해주는 메서드 인 그리

티입니다

이 크리에이트 메서드 는 생성하고자

하는 아이템의 이름을 문자열로

봤는데요

있으 크레이터 볼매 섯 을 통해서

생성이 가능한 지를 확인합니다

생성이 가능하다면

크리에이트 아이템 메서드를 통해서

객체를 생성 하구요

생성한 후에는 후처리 해당되는 포스트

프로세스 아이템 메서드를 호출해

줍니다

2

디스크리트 불과 크리에이트 아이템

포스트 프로세스 아이템은 모두 투상

메서드입니다

이제

팩토리 추상 클래스를 상속 받는

아이템 팩토리 클래스를 추가합니다

팩토리 추상 클래스를 3속 받도록

하세요

클래스 내부에 아이템 데이터 라는

내부 클래스를 추가합니다

2 아이템 데이터 클래스 는 각

아이템에 대한 최대의 생성 개수와

현재 생성된 아이템의 개수를 저장하기

위한 용도입니다

2 item 데이터 클래스 를 갑으로

하는 해시 맵을 이용해 네파 스토리

필드를 추가 구요

생성자를 추가 하구요

백바지 토리 필드에 객체를 생성합니다

그리고 칼 방패 활에 대한 itm

데이터 객체를 생성해서

앱 바 스토리 필드에 었습니다

보시면 칼은 최대의 생성할 수 있는

개수가 3이구요

그리고 방패와 활은 각각 2개 1개

입니다

그리고 구현 해야 할 부모 클래스의

추상 메서드를 추가합니다

있으 크레이터 볼매 섯 을 구현하면

요

내 이미 인자로 받은 값에 대한

아이템 데이터를 얻어 오구요

해당되는 rtm 데이터 없다면 알 수

없는 아이템이라는 출 과 함께

얼쑤 를 싫어합니다

해당되는 아이템 데이터가 있다면

커런트 카운트 값이 x 카운트 값

이상이라면 품절 아이템이라는 출력과

함께 펄스를 발언 합니다

문제가 없다면 투르 슬 다양하구요

크리트 아이템에서 드는 내 이민자

해당되는 구체적인 클래스의 객체를

생성해서 바랍니다

그리고 포스트 프로세스 아이템에서

드는 내 이민재 해당되는 아이템

데이터 객체를 얻어와서 커런트 카운트

값을 1 증가 시킵니다

이제

지금까지 만든 클래스를 테스트하기

위해서 메인 엔트리 클래스를

추가합니다

메인 함수를 추가 구요

그리고 아이템 팩토리 클래스의 객체를

생성합니다

먼저 스워드 아이템을 썩게 만들고

유즈 메소드를 호출해 봅니다

스승이 보면요

3개의 칼에 대한 생성은 문제가

없으나

나머지 2개의 대해서는 품절

아이템이라고 시작됩니다

이는 아이템 팩토리 클래스 에서

보시는 것처럼

아이템 데이타의

최대의 세계의 생성할 수 있도록 지정

했기 때문입니다

방패도 생성해 보면요

실행을 해보면

4개의 생성해서 쉴드는 2개가 품절로

추적 됩니다

그리고 활에 대한 생성도 테스트

해보겠습니다

총 3개를 생산하고 있는데요 수행해

보면

보시는 것처럼 1개는 정상 쪽 상상이

되었으나 2개는 품절 되었다고

축적되고 있습니다

팩토리 클래스 는 생성에 대한

인터페이스 꿈과 생성에 대한 구현

부분이 분리되어 있다고 했는데요

이 팩토리 와 아이템이 생성에 대한

인터페이스 부분이구요

그리고 이 아이템 팩토리 와 스워드

쉴드 보호가 생성에 대한 구현 부분

입니다

생성에 대한 인터페이스와 생성에 대한

구현 부분이 완전히 분리되어 있는데요

완전히 분리되어 있다는 의미는

인터페이스 부분이

이 구형 부분을 전혀 모르고 있다는

것입니다

이는 필요하다면 이 인터페이스

부분만을 별도의 패키지로

분리해서 개발할 수 없다는 것인데요

당연히 구현 부분도 별도의 패키지로

분리해서 개발할 수 있습니다

패키지의 불리는 소프트웨어 개발을

분리해서 여러 개발자가 협업을 통해서

개발할 수 있다는 것입니다

그리고 기존의 구현 부분은 그대로

사용하구요 새로운 구현 부분을

추가해서 시스템의 기능을 확장할 수

있습니다

예를 들어서 이 클래스 다이어그램은

무기에 대한 아이템 생성에 대한

기능인데요

이 무기에 대한 생성 기능은 그대로

유지하면서

음식에 대한 생성 기능을 추가하고자

한다면

팩토리 추상 클래스를 상속받는

푸드 팩토리를

추가 하구요

그리고 아이템 인터페이스를 구해 나는

브레드 클래스나

밀크 클래스 를 추가하면 됩니다

그리고 푸드 팩토리가

2

브레드 와 밀크 클래스 객체를

생성할 수 있도록 해주면 됩니다

이상으로

팩토리 메소드 패턴의 대해서

살펴보았습니다

