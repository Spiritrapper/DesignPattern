[음악]

아

안녕하세요

고프 의 디자인 패턴 중 2 더

레이터 패턴 즉 반복자 패턴에 대해서

살펴보겠습니다

동일한 형태의 댔다 항목을 이처럼

여러 개 가지고 있는 것을 컨테이너

또는 Aggregator 라고 합니다

이 강좌에서는 이러한 동일한 데이터에

집합을 에 글이 캐릭터라고 하겠습니다

이 Aggregator 의 종류에는 배열

링크드 리스트 트리 그래프

그리고 dbms 에 저장된 테이블도

Aggregator 러 갈 수 있습니다

Aggregator 의 구성 데이터를

하나씩 하나씩 가져와야 할 때

Aggregator 의 종류에 따라 그

방법이 다를 수 밖에 없는데요

이는 Aggregator 의 내부 자료

구조가

그 종류에 따라 모두 다르기

때문입니다

예를 들어서 배열의 경우 배열에 구성

수만큼 인덱스 번호를 통해서 가져올

수 있고

링크드 리스트의 경우에는 첫 번째

데이터를 통해서

다음에 연결된 데이터를 가져오는 방법

으로 구성 데이터를 얻을 수 있는데요

이 경우 더 이상 연결된 데이터가

없을 때까지 반복해서 성 데이터를

가져오게 됩니다

이처럼 Aggregator 의 구성

데이터를 얻는 방법이 Aggregator

의 종류에 따라 다른데요

이를 통일된 하나의 방법으로 구성

데이터를 가져오기 위해 사용할 수

있는 패턴이

이들의 이터 배턴 입니다

이 강좌에서는

배열에 대한 이 더 레이 터의 구성

데이터를 순차적으로 조회하는 c 씁

을 통해서 이들의 이터 패턴을

살펴보도록 하겠습니다

먼저 어레이 에 대한 이들의 있다

패턴이 적용된 클래스 다이어그램

입니다

클래스 다이어그램은 uml 다이어그램

중 하나인데요 클래스 들간의 관계를

시각적으로 휴 시에 놓은 다이어그램

입니다

이 동그라미는

인터페이스 이구요

이 사각형은 클래스입니다

인터페이스는 클래스 와 비슷하지만

차이점은 패스워드에 대한 실제 구현

코드를 없고 단지 메서드에 형태의 만

선언되어 있는 것입니다

그리고 이 선들은 요

클래스 또는 인터페이스 간의 관계

인데요 이 다이어그램에서 각 선에

대해서 설명드리면

이 끝이 화살표 인 이 선은 요

Aggregator 인터페이스의 객체가 이

트 레 이 터 인터페이스 타입의

객체를

생성한다 라는 의미입니다

그리고

Aggregator 인터페이스와 어레이

클래스 사이에 이사는 요

어글이 게이터 인터페이스의 메소드를

어레이 클래스 에서 국회의원 한다

라는 의미입니다

이터 레이터 인터페이스와

어레이 터 레이터 클래스 사이에 선

도 동일한 의미인데요

이터 레이터 인터페이스의 배서 들을

어레이 터 레이터 클래스 에서 구현

한다는 의미입니다

어레이 와 어리 에이터 레이터 사이에

아이 아기 5 를 갖는 이 선은 요

어레이 터 레이터 클래스가

어레이 객체를 field로 썩 않는다는

의미입니다

어레이 와 아이템 사이에 이

검정색으로 채워 진다 이 아키오 를

가진 서는 요

어레이 가

아이템 객체를 field로 썩 않는다는

의미입니다

그리고 어레이 와 아이템 객체를 있는

이 선을 보면 이렇게 별표가

보이는데요

이는

얼이 클래스가 아이템 객체를

여러 개의 가질 수 있다는 의미입니다

이처럼 2 다이아 표시는 소유의

의미입니다

그런데 다이아 기호가

이처럼 검정 색으로 채워진 경우와

세워지지 않은 경우가 있는데요

채워진 경우는

생명주기를 함께 한다는 의미이고

채워지지 않는 경우는 생명 주기가

별개 라는 의미입니다

즉 어레이 개체가

매물이 에서 소멸되면 얼이 이 객체가

소유한 아이템 객체 들도 모두 매물이

에서 함께 소멸됩니다

반면 얼이 이터 레이터 객체가

메모리에서 소멸 될 지라도

어레이 객체는 영향을 받지 않습니다

다이아 기호가 붙은 쪽이 소유주가

됩니다

마치 무언가를 담는 그릇으로 생각하면

이해하는데 도움이 됩니다

다시

이들의 이터 패턴 관점에서 이 클래스

다이어그램을 살펴보면요

이 Aggregator 와 이들의 이터

인터페이스가

led 데이터의 구성 데이터를 하나씩

가져올 수 있는 통일된

인터페이스입니다

그리고 어레이 어레이 이터 레이터

클래스 는

이터 레이터 패턴을 적용하기 위해

Aggregator 에 종류 중 배열이

라는 자료 구조의 특화된 클래스

드립니다

그리고 아이템 클래스 는 애그리

게이터 의 구성 데이터에 대한 타입

이구요

이제 이 클래스 다이어그램을 코드로

구현해 보면서

이들의 있다 패턴을 좀 더 이해해

보도록 하겠습니다

먼저 Aggregator 인터페이스를

만들겠습니다

클래스 다이어그램 보시면

Aggregator 는 이 트 레 이 터

객체를

생성한다 라고 되어있는데요

e 더 레이터 메소드가 바로 이 터

레이더 객체를 만들어서 안암 해주는

sd 입니다

암은 이들의 이터 인터페이스를

만들겠습니다

먼저 넥스트 메서드는 이 트 레 이

터 인터페이스를 통해서

Aggregator 에 다음 구성 데이터를

얻을 수 있도록 하고 다음 구성

데이터를 얻을 수 있다면 툴을

발언하고

다음 구성 데이터를 더 이상 얻을 수

없다면 false를 바랍니다

그리고 컬은 틈에서 드는 구성

데이터를 하나 얻어 반원 하는데요

구성 데이터에 대한 타입은 정해지지

알아야 무

일단 오브젝트 타입으로 발언하도록

하였습니다

이제

Aggregator 의 구성 데이터에 대한

데이터 타입인 아이템 클래스 를

만들겠습니다

이름과 가격 field가 있구요

생성자를 통해서 이 두 값을 지정하고

있습니다

그리고 문자의 열로 변환 해주는

메서드 인 2 스트링을

제 정리하고 있습니다

이투 스트링은

2 아이템 객체 자체를 문자열로 변할

때 자동으로 호출되는 메서드입니다

다음은

Aggregator 인터페이스를 구현한

배열 자주 구조를 위한 얼이

클래스입니다

이 클래스는 le 데이터 인터페이스를

구애 내용으로 다음처럼 입력합니다

그리고 이 어 리 클래스가 관리할

배열 데이터를 참조할 칠들을 라구요

2 아이템 쓰 field에 대한 구성돼있다

는 생성자를 통해서 도록 합니다

그리고 배열 인덱스 를 통해서 성

데이터를 얻을 수 있는 옛 아이템

메서드를 추가 구요

그리고 배열의 구성 데이터의 개수를

얻을 수 있는 개 카운트 메서드를

추가합니다

이 켓 아이템과

z 카운트 메서드는

이들의 이터 인터페이스의 구현 클래스

인 어 레이더 레이터 클래스 에서

사용됩니다

그리고

Aggregator 인터페이스의 메서드를

구현 해야 하는데요 코드를 직접

입력해 되지만 이처럼 개발환경에

기능을 이용해도 됩니다

구현 코드를 보면 어레이 터 레이터

객체를 생성해서 방 하고 있는데요

생성시에

있으 를 인자로 전달 하고 있습니다

어레이 터 레이터 클래스를

만들겠습니다

이 클래스 는

이터 레이터 인터페이스를 구현해

하구요

클래스 다이어그램에서 보는 것처럼

얼이 클래스의 객체를 field로 참조

해야 하므로 이 코드가 필요합니다

그리고 배열에서 현재 반응할 수 있는

데이터 항목에 대한 인덱스 값을 위한

field 가 필요합니다

그리고 생성자를 입력합니다

생성자에서 참조할 어글이 데이터

객체를 받아와서 field에 설정 하구요

현재 가르키는 구성 데이터 의

인덱스를

- 1로 지정합니다

이제 이 더 레이터 인터페이스의

배선을 구현합니다

먼저 넥스트 내 스터드를 구현하면 요

먼저 인덱스 값을 1 증가 시키고 요

이 인덱스 값이

배열의 인덱스 값으로 유효한지 여부를

반환하게 됩니다

그리고 커런트 메서드를 구현합니다

에그 데이터 객체 의 옛 아이템

메서드를 통해서

현재 인덱스 값에 해당하는 구성

데이터 객체를 반환 하면 됩니다

이제 클래스 다이어그램에 대한

인터페이스와 클래스를 모두 구현

했는데요 테스트를 해보도록 하겠습니다

메인 엔트리 클래스를 추가합니다

베인 레스 들을 추가합니다

먼저 구성 요소가 담긴 아이템 쓰

배열을 추가 하구요

2 아이템 쓰 배열에 구성 데이터를

얻기 위해서 앞서 만든

얼이 클래스 객체를 생성합니다

생성자에 는

아이템 쓰 배열 객체 를 넘기고

있구요

이어리 객체를 통해서 이 트 레 이

터 즉 반복 자 를 생성합니다

배열의 구성 데이터를 얻어와서

출력하는 코트 를 작성하겠습니다

먼저 화일 문을 통해서

et la 터에 넥스트의 메서드 호출

해서 다음 데이터를 얻을 수 있도록

하구요 다음 데이터를 얻을 수

있는지를 검사합니다

만약 다음 데이터를 얻을 수 있다면

커런트 메서드를 통해서 실제 구성

데이터를 얻어 올 수 있구요

2 를 출력합니다

실행 결과의 보면요

보시는 것처럼 순차적으로 구성

데이터들이 수역 되는 것을 볼 수

있습니다

이 더 레이더 패턴 핵심은 배열이나

링크드 리스트 트리 등과 같은 다양한

형태의 컨테이너 즉 Aggregator 의

구성 데이터를 참조할 수 있는

표준화된 공통 api 를 제공 할 수

있다는 점입니다

이렇게 되면 개발자는 다양한 데이터

구조를 파악하지 않아도 표준화된 생계

apa 만으로도

다양한 구조의 Aggregator 에 구성

데이터를 참조할 수 있게 됩니다

이상으로 고프 의 디자인 패턴 중

이들의 이터 패턴을 첫번째로 서면

되었읍니다

지금 당장은 패턴의 유용성이 와 닫지

않으시더라도

같은 영상을 반복해서 보시거나 다른

패턴 들의 영상을 보시면서 이해의

폭을 넓히면 패턴의 이 용암을

발견하실 수 있을 겁니다

궁금하신점은 댓글을 통해 질문하시면

답변드리겠습니다

