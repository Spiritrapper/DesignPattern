[음악]

아

안녕하세요

고프 의 디자인 패턴 중 트럭 c

패턴에 대해서 살펴보겠습니다

벅시 의 뜻은 대리 이미 구요 어떤

작업의 실행을 대리를 통해서

간접적으로 실행하도록 하는 패턴입니다

이처럼 대리인을 주게 되면 몇 가지

장점들이 생기는데요 일단 플러쉬

패턴에 대해서 전반적으로 살펴보고

프락시 패턴에 대한 장점에 대해서

이야기하겠습니다

이 클래스 다이어그램은 프락시 패턴에

대한 한가지 인데요

먼저 스크린 디스플레이 는 어떤

문자열을 화면에 출력해주는 기능을

제공합니다

그리고 버퍼 디스플레이 클래스가

프락시 즉 대리인의 해당 하는데요

어떤 문자열을 줄 걸 때 스프링

디스플레이 클래스 개체를 바로

사용되지만 이 버퍼 디스플레이

클래스의 객체를 대신 사용해도 됩니다

또 디스플레이 라는 인터페이스를

두어서 버퍼 디스플레이와 스크린

디스플레이 를 구현하고 있는데요

이렇게 해서 버퍼 디스플레이와 스크린

디스플레이를

디스플레이 라는 하나의 타입으로

처리할 수 있도록 합니다

이렇게 인터페이스를 구현하도록

클래스를 설계하면 요 발전은 버퍼

디스플레이나 새 프린트 스페 1

파악해 할 때 그 상위에 있는

디스플레이 인터페이스를 파악함으로써

훨씬 빠르고 명확하게 이해할 수

있습니다

그리고 시스템이 2개의 클래스인 버퍼

디스플레이나 스크린 디스플레이와

직접적으로 관계 매치 않고 오직

디스플레이 라는 1개의 인터페이스와

관계를 맺게 함으로써 시대 매 구조가

단순하고 명확해 집니다

이처럼 결합도 를 최대한 줄이게 되면

기능 확장성이 높아 지고 주 유지

보수도 훨씬 더 쉽게 작업할 수

있습니다

아울러 인터페이스를 누구 이를

구현하는 클래스들을 작성하게 되면

여러 개발자 간의 협업이 1r 해지게

됩니다

이제 이 클래스 다이어그램을 코드로

구해 들어가겠습니다

먼저 디스플레이 인터페이스 입니다

출력하고자 하는 문자열이 을 인자로

받는 프린트 레스 드가 나 있습니다

즉 이 인터페이스를 구현하는 모든

클래스들은 프린트 라는 메서드를

api 로 제공한다는 것을 알 수

있습니다

다음은 이 디스플레이 인터페이스를

상속받는 스크린 디스플레이 클래스를

추가합니다

스 플레이 인터페이스를 구해야 한다고

명실 하구요

프린트 메서드를 추가합니다

여기서 상상력을 발휘해서 이 컨텐트

인자로 받은 문자열을 화면에 출력하기

위해서는 요 준비 작업이 필요하고

상당한 시간이 소요된다 라고

가정하겠습니다

1 위해서

다음처럼

0.5 청도 블럭 되는 코드가 이런

가정에 대한 준비 작업이라 하겠습니다

준비 작업이 모두 완료되면 문자열의

를 출력하고 요

이제 이 스크린 디스플레이 클래스를

테스트 해보겠습니다

메인 엔트리 클래스를 추가하고 요

메인 함수를 추가합니다

그리고 스크린 디스플레이 객체를 하나

만들구요

많은 문자열을 출력해 봅니다

c 등이 보면요

보시는 것처럼 한 줄 단위로 느리게

출력되는 것을 볼 수 있었는데요

이는 스크린 디스플레이 클래스 의

프린트의 메소드가 출력을 위한 준비

작업에 많은 시간이 소요 되었기

때문입니다

이런 드린 출력을 해결하기 위해서는

출력할 데이터를 일단 최대한 모아서

프린트 배스 들을 최소한으로 호출해

주면 됩니다

이를 위해서 버퍼 디스플레이 클래스를

추가합니다

디스플레이 인터페이스를 구하도록

하구요 으

출력할 데이터를 모아서 저장하는 배열

객체 인 버퍼 필드를 추가합니다

[음악]

그리고 출력에 대한 작업을 진짜로

수행해 주는 스크린 디스플레이 객

제도 필드로 추가 하구요

또

문자열이 몇 개 모였을 때 실제로

출력할 것인지 대한 버퍼 크기 필드도

추가합니다

이 버퍼 사이즈 필드의 값은 생성자를

통해서 지정할 수 있도록 하구요

그리고 디스플레이 인터페이스의 베스

들을 구현합니다

먼저 출력할 데이터를 바로 출력하지

않고 일단 퍼포 에 저장이 됩니다

그리고 버퍼 의 크기가

이 버퍼 사이즈와 같다면

플러시 라는 메소드를 호출해 주는

데요

이 플러시 메소드를

바로 작성하겠습니다

먼저 실제 출력 기능을 수행하는

이 스 크 림 객체가 아직 생성되어

있지 않다면 생성을 해주구요

버퍼에 저장된 데이터를 진짜 출력하기

위해서 전처리를 합니다

그리고 전 처리된 데이터를

이 스 크 림 객체를 통해서

출력을 하구요

퍼포 의 대형 은 다 처리가

되었으므로 버퍼를 지웁니다

이제 이 버퍼 디스플레이 클래스를

이용해서 성능을 개선해 보겠습니다

단순히 스크린 디스플레이 대신에 버퍼

디스플레이로 변경 말하면 되는데요

버퍼의 크기를 오로 지 생 구요

지름이 보면요

[음악]

쓰릴미 보면 매우 빠르게 수력 되는

것을 볼 수 있습니다

하지만 문제가 있는데요

버퍼의 크기가

오로지 정 했으므로 출력해야 할

마지막 두 개의 문자열이 출력되어

있지 않습니다

1 위해서는 다음 코드를

추가해야 합니다

즉 버퍼 의 내용을 버프의 크기와

상관없이 바로 출력하는 것입니다

실행해 보면

생이 보면 출력하고자 하는 데이터가

모두 출력된 것을 볼 수 있습니다

지금까지 풀업시 패턴을 살펴 보았구요

실습 예제로 프락시 패턴을 적용해서

하나씩 처리하면 시간이 오래 걸린

기름을 처리해야할 데이터를 모아서

한번에 처리 하도록 해서 성능을

향상시켰습니다

이외에 프락시 패턴이 적절하게

사용되고 있는데요 어떤 요청에 대해서

그 결과를 캐시 처럼 저장해 두고

새로운 요정이 이전에 봤던 요점과

통일 하다면 진짜로 일이라는 객체의

게 일을 시키지 않고 캐시에 저장된

결과를 바로 전달해 주면 됩니다

이렇게 하면 속도 향상은 물론 cpu

등 것 같은 자원을 저렇게 줄 수

있습니다

이상으로 프락시 패턴에 대해서

살펴보았습니다

